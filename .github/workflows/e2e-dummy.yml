on:
  pull_request:
    branches: [ main ]
  push:
    branches:
      - main
jobs:
  e2e_test:
    runs-on: ubuntu-latest
    env:
      KIND_CL_NAME: e2e-dummy
      ENGINE: buildah
    if: contains(github.event.head_commit.message, 'dummy')
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Create Kubernetes using Kind tool
        uses: container-tools/kind-action@v1.7.0
        with:
          registry: true
          # config: ./${{ env.ENGINE }}/hack/kind-config.yml

      - name: Tag and push the image
        working-directory: ${{ env.ENGINE }}
        run: |
          cat <<'EOF' > Dockerfile
          FROM gcr.io/google-samples/hello-app:1.0
          COPY ./wks/ /workspace
          EOF
          docker build -t hello-app .

          docker tag hello-app $KIND_REGISTRY/hello-app
          docker push $KIND_REGISTRY/hello-app

      - name: Deploy a k8s hello app
        run: |
          cat <<'EOF' | kubectl apply -f -
          apiVersion: v1
          kind: Pod
          metadata:
            name: hello
            labels:
              app: hello
          spec:
            volumes:
              - name: workspace
                emptyDir: {}
            restartPolicy: Never
            initContainers:
              - name: dummy
                image: alpine:3
                command: [ "/bin/sh","-c" ]
                args:
                  - |
                    ls -la /
                    ls -la /workspace
                volumeMounts:
                  - name: workspace
                    mountPath: /workspace
            containers:
               - name: bud
                 image: kind-registry:5000/hello-app
                 volumeMounts:
                   - name: workspace
                     mountPath: /workspace
          EOF

          sleep 10s

          kubectl logs -lapp=hello -c dummy -f

          #while true; do
          #  if kubectl -n default wait --for=condition=ready pod -lapp=hello 2>/dev/null; then
          #    pod_status=0
          #    break
          #  fi
          #  sleep 3
          #done
          #
          #if [[ $pod_status -eq 1 ]]; then
          #    echo "Pod failed to start!"
          #    exit 1
          #fi
          #
          #echo "Pod succeeded to start"
          #exit 0

      - name: Delete cluster
        run: kind delete cluster


