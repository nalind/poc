on:
  pull_request:
    branches: [ main ]
  push:
    branches:
      - main
jobs:
  e2e_test:
    runs-on: ubuntu-latest
    env:
      KIND_CL_NAME: e2e-test
    if: ${{ contains(github.event.head_commit.message, '#buildah') || contains(github.event.head_commit.message, '#kaniko') }}
    strategy:
      matrix:
        include:
          - metadataTomlFileName: metadata_curl.toml
            filesToSearch: curl
          - metadataTomlFileName: metadata_ubuntu_cert.toml
            filesToSearch: /usr/local/share/ca-certificates/server.crt
        # List of the Dockerfiles to be tested using as OS: ubuntu, RHEL
        # dockerfile_name: [ ubi8-good-bye, ubi8-nodejs, ubuntu-wget, ubuntu-cert ]

    steps:
      - name: Set buildah engine
        if: "contains(github.event.head_commit.message, '#buildah')"
        run: echo "ENGINE=buildah" >> $GITHUB_ENV

      - name: Set kaniko engine
        if: "contains(github.event.head_commit.message, '#kaniko')"
        run: echo "ENGINE=kaniko" >> $GITHUB_ENV

      - name: Checkout
        uses: actions/checkout@v2

      - name: Build the ${{ env.ENGINE }} Poc
        run: |
          cp -r ./workspace ./${{ env.ENGINE }}/workspace
          pushd ${{ env.ENGINE }}
          ./hack/build.sh
          popd

      - name: Create Kubernetes cluster using Kind tool
        uses: container-tools/kind-action@v1.7.0
        with:
          cluster_name: e2e-test
          registry: true

      - name: Tag and push the image
        run: |
          docker tag ${{ env.ENGINE }}-app $KIND_REGISTRY/${{ env.ENGINE }}-app
          docker push $KIND_REGISTRY/${{ env.ENGINE }}-app

      - name: Install Helm tool
        run: |
          HELM_VERSION=$(curl -Ls https://github.com/helm/helm/releases | grep 'href="/helm/helm/releases/tag/v3.[0-9]*.[0-9]*\"' | sed -E 's/.*\/helm\/helm\/releases\/tag\/(v[0-9\.]+)".*/\1/g' | head -1)
          sudo wget -q https://get.helm.sh/helm-$HELM_VERSION-linux-amd64.tar.gz -O - | tar -xzO linux-amd64/helm > /usr/local/bin/helm
          sudo chmod +x /usr/local/bin/helm

      - name: Deploy the ${{ env.ENGINE }} job to perform a Dockerfile build
        run: |
          kubectl create ns buildpack
          pushd helm

          echo "Test using: ${{ matrix.metadataTomlFileName }} and ${{ matrix.filesToSearch }} to search"
          helm -n buildpack install ${{ env.ENGINE }}-poc -f values.yaml --set engine.metadataTomlFileName=${{ matrix.metadataTomlFileName }} --set engine.filesToSearch=${{ matrix.filesToSearch }} .
          popd

          echo "Starting to build/parse the Dockerfile..."
          sleep 10s
          kubectl logs -n buildpack job/engine-poc -f --ignore-errors=true

      - name: "Wait till job's finished and check status: complete or failed"
        run: |
          while true; do
            if kubectl -n buildpack wait --timeout=300s --for=condition=complete job/engine-poc 2>/dev/null; then
              job_result=0
              break
            fi

            if kubectl -n buildpack wait --timeout=300s --for=condition=failed job/engine-poc 2>/dev/null; then
              job_result=1
              break
            fi

            kubectl -n buildpack get job/engine-poc -o yaml

            sleep 3
          done

          if [[ $job_result -eq 1 ]]; then
            echo "Job failed!"
            exit 1
          fi

          echo "Job succeeded"
          exit 0

      - name: Delete cluster
        run: kind delete cluster


