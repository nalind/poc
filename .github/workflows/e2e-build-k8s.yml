on:
  pull_request:
    branches: [ main ]
  push:
    branches:
      - main
jobs:
  e2e_test:
    runs-on: ubuntu-latest
    env:
      COMMIT_MSG: ${{ github.event.head_commit.message }}
      KIND_CL_NAME: e2e-test
    strategy:
      matrix:
        # List of the Dockerfiles to be tested using as OS: ubuntu, RHEL
        dockerfile_name: [ ubi8-good-bye, ubi8-nodejs, ubuntu-wget, ubuntu-cert ]
    steps:
      - name: Set building engine
        run: |
          if [[ "$COMMIT_MSG" == *"buildah"* ]]; then
            echo "ENGINE=buildah" >> $GITHUB_ENV
          else
            echo "ENGINE=kaniko" >> $GITHUB_ENV
          fi

      - name: Checkout
        uses: actions/checkout@v2

      - name: Build the ${{ env.ENGINE }} Poc
        working-directory: ${{ env.ENGINE }}
        run: ./hack/build.sh

      - name: Clean resident local docker
        if: ${{ env.ACT }}
        continue-on-error: true
        run: |
          for DIMG in "$KIND_CL_NAME-control-plane "; do
            docker stop $DIMG ; docker rm $DIMG ;
          done ;
          sleep 1

      - name: Create Kubernetes Kind Cluster
        uses: container-tools/kind-action@v1.7.0
        with:
          cluster_name: e2e-test
          registry: true

      - name: Tag and push the image
        run: |
          docker tag ${{ env.ENGINE }}-app $KIND_REGISTRY/${{ env.ENGINE }}-app
          docker push $KIND_REGISTRY/${{ env.ENGINE }}-app

      - name: Install Helm tool
        run: |
          HELM_VERSION=$(curl -Ls https://github.com/helm/helm/releases | grep 'href="/helm/helm/releases/tag/v3.[0-9]*.[0-9]*\"' | sed -E 's/.*\/helm\/helm\/releases\/tag\/(v[0-9\.]+)".*/\1/g' | head -1)
          sudo wget -q https://get.helm.sh/helm-${{ env.HELM_VERSION }}-linux-amd64.tar.gz -O - | tar -xzO linux-amd64/helm > /usr/local/bin/helm
          sudo chmod +x /usr/local/bin/helm

      - name: Deploy the ${{ env.ENGINE }} job to perform a Dockerfile build
        working-directory: ${{ env.ENGINE }}
        run: |
          kubectl create ns buildpack
          kubectl create -n buildpack configmap dockerfile --from-file=Dockerfile=./wks/${{ matrix.dockerfile_name }}
          echo "Build and parse the Dockerfile: ${{ matrix.dockerfile_name }}"
          kubectl apply -f ./k8s/manifest-cloud.yml
          sleep 10s
          kubectl get pods -n buildpack
          kubectl logs -n buildpack job/${{ env.ENGINE }}-poc -f --ignore-errors=true

      - name: "Wait till job's finished and check status: complete or failed"
        working-directory: ${{ env.ENGINE }}
        run: |
          while true; do
            if kubectl -n buildpack wait --timeout=300s --for=condition=complete job/${{ env.ENGINE }}-poc 2>/dev/null; then
              job_result=0
              break
            fi

            if kubectl -n buildpack wait --timeout=300s --for=condition=failed job/${{ env.ENGINE }}-poc 2>/dev/null; then
              job_result=1
              break
            fi

            kubectl -n buildpack get job/${{ env.ENGINE }}-poc -o yaml

            sleep 3
          done

          if [[ $job_result -eq 1 ]]; then
            echo "Job failed!"
            exit 1
          fi

          echo "Job succeeded"
          exit 0

      - name: Delete cluster
        run: kind delete cluster


